AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create a VPC, subnets, and route table"

Parameters:
  EnvironmentName:
    Type: String

  VpcCIDR:
    Type: String

  PublicSubnet1CIDR:
    Type: String

  PublicSubnet2CIDR:
    Type: String

  PrivateSubnet1CIDR:
    Type: String

  PrivateSubnet2CIDR:
    Type: String

  DBPrivateSubnet1CIDR:
    Type: String

  DBPrivateSubnet2CIDR:
    Type: String

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

# Create public subnet in zone A
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

# Create public subnet in zone B
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

# Create private subnet in zone A
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

# Create private subnet in zone B
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

# Create DB private subnet in zone A
  DBPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref DBPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DBPrivateSubnet1

# Create DB private subnet in zone B
  DBPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref DBPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DBPrivateSubnet2

# Create public subnet route table 1
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable1

# Create public subnet route table 2
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable2

# Create private subnet route table 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable1

# Create private subnet route table 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable2

# Create DB private subnet route table
  DBPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DBPrivateRouteTable

# Associate route table to public subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

# Associate route table to public subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

# Associate route table to private subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

# Associate route table to private subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

# Associate route table to DB private subnet 1
  DBPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBPrivateRouteTable
      SubnetId: !Ref DBPrivateSubnet1

# Associate route table to DB private subnet 2
  DBPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBPrivateRouteTable
      SubnetId: !Ref DBPrivateSubnet2


# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-IGW

# Create Internet Gateway attachmend
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


# Create NAT Gateway 1:
  ElasticIPAddress1:
    Type: AWS::EC2::EIP
    DependsOn: AttachInternetGateway
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-NAT-GW1

# Create NAT Gateway 2:
  ElasticIPAddress2:
    Type: AWS::EC2::EIP
    DependsOn: AttachInternetGateway
    Properties:
      Domain: vpc

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName}-NAT-GW2

# Create Transit Gateway
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    DependsOn: VPC  # isn't necessary, but I like to have an order
    Properties:
        Description: "Transit Gateway"
        AmazonSideAsn: 64512
        AutoAcceptSharedAttachments: "enable"
        DefaultRouteTableAssociation: "enable"
        DefaultRouteTablePropagation: "enable"
        DnsSupport: "enable"
        VpnEcmpSupport: "enable"
        Tags: 
          - 
            Key: "Environment"
            Value: !Sub ${EnvironmentName}
          - 
            Key: "Name"
            Value: !Sub ${EnvironmentName}-TGW

# Create Transit Gateway attachment in the VPC
  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Transit-Attachment
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref VPC

# Create destination route 0.0.0.0/0 to internet gateway (public)
  RouteToInternetGateway1:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteToInternetGateway2:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
# Create destination route 0.0.0.0/0 to nat gateway (private)
  RouteToNatGateway1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteToNatGateway2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

# Create destination route 10.10.0.0/16 to transit gateway (to on-premise)
  RouteToTransitGateway1:
    Type: AWS::EC2::Route
    DependsOn:
      - TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 10.10.0.0/16
      TransitGatewayId: !Ref TransitGateway

  RouteToTransitGateway2:
    Type: AWS::EC2::Route
    DependsOn:
      - TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 10.10.0.0/16
      TransitGatewayId: !Ref TransitGateway

# In case you need to create a VPN #
#    CustomerGateway:
#        Type: AWS::EC2::CustomerGateway
#        Properties:
#            BgpAsn: 65000
#            IpAddress: "61.92.0.150" # not real Public IP
#            Type: "ipsec.1"
#            Tags: 
#              - 
#                Key: "Name"
#                Value: "CGW-XXX"

#    VPNGateway:
#        Type: AWS::EC2::VPNGateway
#        Properties:
#            AmazonSideAsn: 64515
#            Type: "ipsec.1"
#            Tags: 
#              - 
#                Key: "Name"
#                Value: "VGW-XXX"

#    VPNConnection:
#        Type: AWS::EC2::VPNConnection
#        Properties:
#            Type: "ipsec.1"
#            StaticRoutesOnly: false
#            CustomerGatewayId: !Ref CustomerGateway
#            VpnGatewayId: !Ref VPNGateway
#            Tags: 
#              - 
#                Key: "Name"
#                Value: "VPN-XXX"


Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  PublicSubnet1:
    Description: Public Subnet 1 
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1 
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2

  DBPrivateSubnet1:
    Description: DB Private Subnet 1 
    Value: !Ref DBPrivateSubnet1

  DBPrivateSubnet2:
    Description: DB Private Subnet 2
    Value: !Ref DBPrivateSubnet2

  PublicRouteTable1:
    Description: Public route table 1
    Value: !Ref PublicRouteTable1

  PublicRouteTable2:
    Description: Public route table 2
    Value: !Ref PublicRouteTable2

  PrivateRouteTable1:
    Description: Private route table 1
    Value: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Description: Private route table 2
    Value: !Ref PrivateRouteTable2

  DBPrivateRouteTable:
    Description: DB Private route table
    Value: !Ref DBPrivateRouteTable