AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create ECS Fargate"

Parameters:
  EnvironmentType:
    Type: String

  EnvironmentName:
    Type: String

  PrivateDomainName:
    Type: String

  PrivateSubnet1:
    Type: String

  PrivateSubnet2:
    Type: String

  ECSSecurityGroup:
    Type: String

  DesiredCount:
    Type: String

  ImageUrlApp:
    Type: String

  TargetGroupAPP1:
    Type: String

  TargetGroupAPP2:
    Type: String

  FileSystemId:
    Type: String

  AccessPointIdDataApp1:
    Type: String

  AccessPointIdDataApp2:
    Type: String


Conditions:
  isProdEnvironmentType: !Equals [!Ref EnvironmentType, prod]


Resources:
  LogGroupApp1:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-App1
      RetentionInDays: 365

  LogGroupApp2:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-App2
      RetentionInDays: 365

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskRole
      Description: Role access to other AWS resources
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Path: /

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: ECSTaskRole
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskExecutionRole
      Description: Role access to other AWS resources
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /

  TaskDefinitionApp1:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - LogGroupApp1
    Properties:
      Family: !Sub ${EnvironmentName}-TD-App1
      Cpu: !If [isProdEnvironmentType, 512, 256]
      Memory: !If [isProdEnvironmentType, 1024, 512]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: ContainerApp1
          Cpu: !If [isProdEnvironmentType, 512, 256]
          MemoryReservation: !If [isProdEnvironmentType, 1024, 512]
          Image: !Ref ImageUrlApp
          PortMappings:
            - ContainerPort: 80
          MountPoints:
            - SourceVolume: efs-app1
              ContainerPath: /mnt/app1
          Environment:
            - Name: DB_USER
              Value: 'user'
            - Name: DB_PASSWORD
              Value: 'password'
            - Name: DB_URL
              Value: !Sub 'jdbc:mysql:aurora//db.${PrivateDomainName}:33066/AuroraDB'
          StopTimeout: 30
          Ulimits:
            - Name: 'nofile'
              SoftLimit: 65536
              HardLimit: 65536
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${EnvironmentName}-App1"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: App1
      Volumes:
        - Name: efs-app1
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystemId
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref AccessPointIdDataApp1
              IAM: DISABLED
      Tags:
        -
          Key: Environment
          Value: !Ref EnvironmentName

  TaskDefinitionApp2:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - LogGroupApp2
    Properties:
      Family: !Sub ${EnvironmentName}-TD-App2
      Cpu: !If [isProdEnvironmentType, 512, 256]
      Memory: !If [isProdEnvironmentType, 1024, 512]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: ContainerApp2
          Cpu: !If [isProdEnvironmentType, 512, 256]
          MemoryReservation: !If [isProdEnvironmentType, 1024, 512]
          Image: !Ref ImageUrlApp
          PortMappings:
            - ContainerPort: 80
          MountPoints:
            - SourceVolume: efs-app2
              ContainerPath: /mnt/app2
          Environment:
            - Name: DB_USER
              Value: 'user'
            - Name: DB_PASSWORD
              Value: 'password'
            - Name: DB_URL
              Value: !Sub 'jdbc:mysql:aurora//db.${PrivateDomainName}:33066/AuroraDB'
          StopTimeout: 30
          Ulimits:
            - Name: 'nofile'
              SoftLimit: 65536
              HardLimit: 65536
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${EnvironmentName}-App2"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: App2
      Volumes:
        - Name: efs-app2
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystemId
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref AccessPointIdDataApp2
              IAM: DISABLED
      Tags:
        -
          Key: Environment
          Value: !Ref EnvironmentName

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-ECS-cluster
      ClusterSettings:
        -
          Name: containerInsights
          Value: 'enabled'
      CapacityProviders:
        - FARGATE_SPOT
        - FARGATE
      Tags:
        -
          Key: Environment
          Value: !Ref EnvironmentName
        -
          Key: Name
          Value: !Sub ${EnvironmentName}-ECS-cluster

  ServiceApp1:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${EnvironmentName}-APP1"
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      TaskDefinition: !Ref TaskDefinitionApp1
      EnableExecuteCommand: 'true'
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroupAPP1
          ContainerPort: 80
          ContainerName: ContainerApp1
      Tags:
        -
          Key: Environment
          Value: !Ref EnvironmentName
        -
          Key: Name
          Value: !Sub ${EnvironmentName}-APP1

  ServiceApp2:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${EnvironmentName}-APP2"
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      TaskDefinition: !Ref TaskDefinitionApp2
      EnableExecuteCommand: 'true'
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroupAPP2
          ContainerPort: 80
          ContainerName: ContainerApp2
      Tags:
        -
          Key: Environment
          Value: !Ref EnvironmentName
        -
          Key: Name
          Value: !Sub ${EnvironmentName}-APP2