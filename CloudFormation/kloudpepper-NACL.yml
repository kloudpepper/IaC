AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create a network ACL"

Parameters:
  EnvironmentType:
    Type: String

  EnvironmentName:
    Type: String

  VpcID:
    Type: String

  VpcCIDR:
    Type: String
  
  PublicSubnet1CIDR:
    Type: String

  PublicSubnet2CIDR:
    Type: String

  PrivateSubnet1CIDR:
    Type: String
  
  PrivateSubnet2CIDR:
    Type: String

  PublicSubnet1:
    Type: String

  PublicSubnet2:
    Type: String

  PrivateSubnet1:
    Type: String

  PrivateSubnet2:
    Type: String

  DBPrivateSubnet1:
    Type: String

  DBPrivateSubnet2:
    Type: String


Conditions:
  isProdEnvironmentType: !Equals [!Ref EnvironmentType, prod]
  isNonProdEnvironmentType: !Equals [!Ref EnvironmentType, nonprod]


Resources:
### PUBLIC SUBNETS ###
# Specifies a network ACL for public subnets
  PublicNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VpcID
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicNetwork-ACL

# Acl association to public subnet 1
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: PublicNetworkACL
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkACL

# Acl association to public subnet 2
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: PublicNetworkACL
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkACL

### PRIVATE SUBNETS ###
# Specifies a network ACL for private subnets
  PrivateNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VpcID
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateNetwork-ACL

# Acl association to private subnet 1
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: PrivateNetworkACL
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkACL

# Acl association to private subnet 2
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: PrivateNetworkACL
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkACL

### DB SUBNETS ###
# Specifies a network ACL for your DB private subnets
  DBPrivateNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VpcID
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DBPrivateNetwork-ACL

# Acl association to DB private subnet 1
  DBPrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: DBPrivateNetworkACL
    Properties:
      SubnetId: !Ref DBPrivateSubnet1
      NetworkAclId: !Ref DBPrivateNetworkACL

# Acl association to DB private subnet 2
  DBPrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: DBPrivateNetworkACL
    Properties:
      SubnetId: !Ref DBPrivateSubnet2
      NetworkAclId: !Ref DBPrivateNetworkACL

### IN ###
# Public subnet inbound rules
  InboundWorldNACLto80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkACL
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '80'
        To: '80'

  InboundWorldNACLto443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkACL
      RuleNumber: '101'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '443'
        To: '443'

  InboundWorldNACLtoEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkACL
      RuleNumber: '102'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '1024'
        To: '65535'

# Private subnet inbound rules
  InboundOnpremiseNACLtoALB:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isNonProdEnvironmentType
    Properties:
      NetworkAclId: !Ref PrivateNetworkACL
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "10.0.0.0/16" # from On-premise to ALB
      PortRange:
        From: '8445'
        To: '8445'

  InboundOnpremiseNACLtoR53Resolver:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkACL
      RuleNumber: '101'
      Protocol: "17"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "10.0.0.0/16" # from On-premise to Route53 Resolver
      PortRange:
        From: '53'
        To: '53'

  PrivateSubnet1InboundNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkACL
      RuleNumber: '102'
      Protocol: "-1" # ALL
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: !Ref PrivateSubnet1CIDR

  PrivateSubnet2InboundNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkACL
      RuleNumber: '103'
      Protocol: "-1" # ALL
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: !Ref PrivateSubnet2CIDR

  PublicSubnet1InboundNACL:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isProdEnvironmentType
    Properties:
      NetworkAclId: !Ref PrivateNetworkACL
      RuleNumber: '104'
      Protocol: "6" # ALL
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: !Ref PublicSubnet1CIDR
      PortRange:
        From: '8554' # from Public ALB to ECS
        To: '8554'

  PublicSubnet2InboundNACL:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isProdEnvironmentType
    Properties:
      NetworkAclId: !Ref PrivateNetworkACL
      RuleNumber: '105'
      Protocol: "6" # ALL
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: !Ref PublicSubnet2CIDR
      PortRange:
        From: '8554' # from Public ALB to ECS
        To: '8554'

  InboundNACLtoEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkACL
      RuleNumber: '106'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: '1024'
        To: '65535'

# DB Private subnet inbound rules
  PrivateSubnet1InboundDBNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBPrivateNetworkACL
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: !Ref PrivateSubnet1CIDR # Private Subnet 1
      PortRange:
        From: '33066'
        To: '33066'

  PrivateSubnet2InboundDBNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBPrivateNetworkACL
      RuleNumber: '101'
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: !Ref PrivateSubnet2CIDR # Private Subnet 2
      PortRange:
        From: '33066'
        To: '33066'

### OUT ###
# Public subnet outbound rules
  OutboundPublicSubnetNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkACL
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"

# Private subnet outbound rules
  OutboundPrivateSubnetNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkACL
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"

# DB Private subnet outbound rules
  OutboundDBPrivateSubnetNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DBPrivateNetworkACL
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"